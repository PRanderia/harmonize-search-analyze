Description: >
    This is a long running ECS service that runs the data search web application
    including the nginx proxy, Kibana and the aws-es-kibana proxy.

Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /*

    EnvironmentName:
        Description: >
            An environment name that will be prefixed to resource names.
            Should be unique per region.
        Type: String
        MinLength: 2
        MaxLength: 128
        AllowedPattern: '(?:[a-z0-9]+(?:[a-z0-9._-]+))'
        ConstraintDescription: >
            Can only contain lower case alphanumeric characters in addition to
            period, underscore, dash. Must start with an alphanumeric character.
            This is is to conform with Docker image regristry name constraint.
        Default: datasearch-blog

    EnvironmentVersion:
        Description: >
            Version tag used for Docker images
        Type: String
        Default: latest

    EsEndpoint:
        Description: Elasticsearch Endpoint used by Kibana through the aws-es-kibana proxy
        Type: String

    EsArn:
        Description: Elasticsearch ARN used to build granular resource policies
        Type: String

Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: ServiceRole
        Properties:
            Cluster: !Ref Cluster
            Role: !GetAtt ServiceRole.Arn
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
                - ContainerName: nginx
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        DependsOn: TaskRole
        Properties:
            Family: !Ref EnvironmentName
            TaskRoleArn: !GetAtt TaskRole.Arn
            ContainerDefinitions:
                - Name: nginx
                  Essential: true
                  Image: !Sub
                      "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}/nginx:${EnvironmentVersion}"
                  Memory: 256
                  Links: [kibana, webapp]
                  PortMappings:
                    - ContainerPort: 80
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                - Name: webapp
                  Essential: true
                  Image: !Sub
                      "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}/webapp:${EnvironmentVersion}"
                  Memory: 256
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                - Name: kibana
                  Essential: true
                  Image: !Sub
                      "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}/kibana:${EnvironmentVersion}"
                  Memory: 2048
                  Links: [aws-es-kibana]
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                - Name: aws-es-kibana
                  Essential: true
                  Image: !Sub
                      "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}/aws-es-kibana:${EnvironmentVersion}"
                  Memory: 512
                  Environment:
                    - Name: ES_ENDPOINT
                      Value: !Ref EsEndpoint
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /webapp/
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub "${EnvironmentName}-${AWS::Region}-ecs-service"
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ecs.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
            # This IAM policy grants the service access to register/unregister with the
            # Application Load Balancer (ALB). It is based on the default documented here:
            # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
            # NOTE: ALB does not support resource ARN:
            # http://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/load-balancer-authentication-access-control.html
                - PolicyName: ec2-elb
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - ec2:Describe*
                                - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                                - elasticloadbalancing:Describe*
                                - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                                - elasticloadbalancing:DeregisterTargets
                                - elasticloadbalancing:DescribeTargetGroups
                                - elasticloadbalancing:DescribeTargetHealth
                                - elasticloadbalancing:RegisterTargets
                            Resource: '*'

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub "${EnvironmentName}-${AWS::Region}-ecs-task"
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ecs-tasks.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
            # This IAM policy grants the service access to Elasticsearch to allow
            # minimum access from Kibana
                - PolicyName: elastisearch
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - es:ESHttpHead
                            Resource: !Sub "${EsArn}/"
                          - Effect: Allow
                            Action:
                                - es:ESHttpGet
                            Resource: !Sub "${EsArn}/_nodes"
                          - Effect: Allow
                            Action:
                                - es:ESHttpGet
                            Resource: !Sub "${EsArn}/_cluster/health/.kibana"
                          - Effect: Allow
                            Action:
                                - es:ESHttpGet
                                - es:ESHttpPost
                            Resource: !Sub "${EsArn}/.kibana/*"
                          - Effect: Allow
                            Action:
                                - es:ESHttpPost
                            Resource: !Sub "${EsArn}/_mget"
                          - Effect: Allow
                            Action:
                                - es:ESHttpPost
                            Resource: !Sub "${EsArn}/_msearch"
                          - Effect: Allow
                            Action:
                                - es:ESHttpPost
                            Resource: !Sub "${EsArn}/*harmonized*/_field_stats"
                          - Effect: Allow
                            Action:
                                - es:ESHttpGet
                            Resource: !Sub "${EsArn}/*harmonized*/_search"
                          - Effect: Allow
                            Action:
                                - es:ESHttpGet
                            Resource: !Sub "${EsArn}/*harmonized*/_mapping/field/*"
                          - Effect: Allow
                            Action:
                                - es:ESHttpGet
                            Resource: !Sub "${EsArn}/*dictionary*/_search"

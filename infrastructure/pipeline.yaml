Description: >
    This template deploys a CI/CD pipeline used to build/push Docker images.
    It deploys a CodePipeline pipeline, a CodeBuild project and the ECR
    repositories used by the service.

Parameters:

    EnvironmentName:
        Description: >
            An environment name that will be prefixed to resource names.
            Should be unique per region.
        Type: String
        MinLength: 2
        MaxLength: 128
        AllowedPattern: '(?:[a-z0-9]+(?:[a-z0-9._-]+))'
        ConstraintDescription: >
            Can only contain lower case alphanumeric characters in addition to
            period, underscore, dash. Must start with an alphanumeric character.
            This is is to conform with Docker image regristry name constraint.
        Default: datasearch-blog

    EnvironmentVersion:
        Description: >
            Version tag used for Docker images
        Type: String
        Default: latest

    SourceBucket:
        Description: S3 bucket where the source is located
        Type: String
        Default: aws-bigdata-blog

    SourceObject:
        Description: S3 object zip file containing the source
        Type: String
        Default: artifacts/harmonize-search-analyze/src.zip

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: The ECS Cluster ID to deploy the service
        Type: String

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    EsEndpoint:
        Description: Endpoint for Amazon Elasticsearch service.
        Type: String
        MinLength: 10

    EsArn:
        Description: ARN of Amazon Elasticsearch Service.
        Type: String
        MinLength: 10

Resources:
    # Artifact Bucket used by CodePipeline and CodBuild
    ArtifactStore:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            VersioningConfiguration:
                Status: Enabled

    ECRRepoKibana:
        Type: AWS::ECR::Repository
        DeletionPolicy: Retain
        Properties:
            RepositoryName: !Sub "${EnvironmentName}/kibana"

    ECRRepoAwsEsKibana:
        Type: AWS::ECR::Repository
        DeletionPolicy: Retain
        Properties:
            RepositoryName: !Sub "${EnvironmentName}/aws-es-kibana"

    ECRRepoNginx:
        Type: AWS::ECR::Repository
        DeletionPolicy: Retain
        Properties:
            RepositoryName: !Sub "${EnvironmentName}/nginx"

    ECRRepoWebapp:
        Type: AWS::ECR::Repository
        DeletionPolicy: Retain
        Properties:
            RepositoryName: !Sub "${EnvironmentName}/webapp"

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref EnvironmentName
            Description: Used to build and push Docker images
            Source:
                Type: S3
                Location: !Sub "${SourceBucket}/${SourceObject}"
            Artifacts:
                Type: S3
                Location: !Ref ArtifactStore
            Environment:
                Type: LINUX_CONTAINER
                Image: aws/codebuild/docker:1.12.1
                ComputeType: BUILD_GENERAL1_LARGE
                EnvironmentVariables:
                    - Name: ENV_NAME
                      Value: !Ref EnvironmentName
                    - Name: ECR_REPOSITORY_URI_PREFIX
                      Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"
            ServiceRole: !GetAtt CodeBuildRole.Arn
            TimeoutInMinutes: 30
            Tags:
                - Key: Name
                  Value: !Sub "${EnvironmentName} CodeBuild project"

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - codebuild.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: ECRPullPush
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - ecr:BatchCheckLayerAvailability
                                - ecr:BatchGetImage
                                - ecr:CompleteLayerUpload
                                - ecr:GetDownloadUrlForLayer
                                - ecr:InitiateLayerUpload
                                - ecr:PutImage
                                - ecr:UploadLayerPart
                            Resource:
                                - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EnvironmentName}*"
                - PolicyName: ECRGetAuth
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - ecr:GetAuthorizationToken
                            Resource: '*'
                - PolicyName: CloudWatchLogsCodeBuild
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvironmentName}"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvironmentName}:*"
                - PolicyName: S3GetObject
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:GetObject*
                            Resource:
                                - !Sub "arn:aws:s3:::${SourceBucket}/${SourceObject}"
                - PolicyName: S3Put
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"

    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref EnvironmentName
            ArtifactStore:
                Type: S3
                Location: !Ref ArtifactStore
            RoleArn: !GetAtt CodePipelineRole.Arn
            Stages:
                - Name: Source
                  Actions:
                      - Name: SourceBucket
                        ActionTypeId:
                            Category: Source
                            Owner: AWS
                            Version: 1
                            Provider: S3
                        OutputArtifacts:
                            - Name: SourceOutput
                        Configuration:
                            S3Bucket: !Ref SourceBucket
                            S3ObjectKey: !Ref SourceObject
                        RunOrder: 1
                - Name: BuildPush
                  Actions:
                      - Name: DockerImages
                        InputArtifacts:
                            - Name: SourceOutput
                        OutputArtifacts:
                            - Name: BuildOutput
                        ActionTypeId:
                            Category: Build
                            Owner: AWS
                            Version: 1
                            Provider: CodeBuild
                        Configuration:
                            ProjectName: !Ref CodeBuild
                        RunOrder: 1
                - Name: Deploy
                  Actions:
                      - Name: EcsSearchWebapp
                        InputArtifacts:
                            - Name: SourceOutput
                            - Name: BuildOutput
                        ActionTypeId:
                            Category: Deploy
                            Owner: AWS
                            Version: 1
                            Provider: CloudFormation
                        Configuration:
                            ActionMode: CREATE_UPDATE
                            StackName: !Sub "${EnvironmentName}-${AWS::Region}-service"
                            TemplatePath: SourceOutput::infrastructure/service.yaml
                            Capabilities: CAPABILITY_NAMED_IAM
                            RoleArn: !GetAtt PipelineCloudFormationRole.Arn
                            ParameterOverrides: !Sub |
                                {
                                    "EnvironmentName":  "${EnvironmentName}",
                                    "EnvironmentVersion":  {
                                        "Fn::GetParam" : [
                                            "BuildOutput",
                                            "config-env.json",
                                            "ENV_VERSION"
                                        ]},
                                    "VPC":  "${VPC}",
                                    "Cluster":  "${Cluster}",
                                    "Listener":  "${Listener}",
                                    "EsArn":  "${EsArn}",
                                    "EsEndpoint":  "${EsEndpoint}"
                                }
                        RunOrder: 1

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - codepipeline.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: S3GetList
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:Get*
                                - s3:List*
                            Resource:
                                - !Sub "arn:aws:s3:::${SourceBucket}"
                                - !Sub "arn:aws:s3:::${SourceBucket}/${SourceObject}"
                - PolicyName: S3Put
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"
                - PolicyName: CodeBuildStart
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - codebuild:BatchGetBuilds
                                - codebuild:StartBuild
                            Resource:
                                - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuild}"
                - PolicyName: CloudFormation
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - cloudformation:CreateChangeSet
                                - cloudformation:CreateStack
                                - cloudformation:DeleteChangeSet
                                - cloudformation:DeleteStack
                                - cloudformation:DescribeChangeSet
                                - cloudformation:DescribeStacks
                                - cloudformation:ExecuteChangeSet
                                - cloudformation:SetStackPolicy
                                - cloudformation:SetStackPolicy
                                - cloudformation:UpdateStack
                                - cloudformation:ValidateTemplate
                            Resource:
                                - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${EnvironmentName}-*"
                - PolicyName: PassRole
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - iam:PassRole
                            Resource:
                                - !GetAtt PipelineCloudFormationRole.Arn

    PipelineCloudFormationRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - cloudformation.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: services
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - ec2:Describe*
                                - ecs:*
                                - elasticloadbalancing:*
                                - iam:Get*
                                - iam:List*
                                - logs:*
                            Resource: '*'
                - PolicyName: iam-role
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - iam:*Role*
                            Resource:
                                - !Sub "arn:aws:iam::${AWS::AccountId}:role/${EnvironmentName}-*"
                - PolicyName: iam-pass-role
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - iam:PassRole
                            Resource:
                                - !Sub "arn:aws:iam::${AWS::AccountId}:role/${EnvironmentName}-${AWS::Region}-ecs-task"
                                - !Sub "arn:aws:iam::${AWS::AccountId}:role/${EnvironmentName}-${AWS::Region}-ecs-service"
    PipelineCleanup:
        DependsOn: CodePipeline
        Type: Custom::PipelineCleanup
        Properties:
            ServiceToken: !GetAtt PipelineCleanupFunction.Arn
    PipelineCleanupFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            Role: !GetAtt PipelineCleanupExecutionRole.Arn
            Runtime: python2.7
            Timeout: 300
            Code:
                ZipFile: !Sub |
                    from __future__ import print_function
                    import json
                    import boto3
                    import cfnresponse
                    import time
                    def handler(event, context):
                        print(json.dumps(event))
                        if (event["RequestType"] == "Delete"):
                            try:
                                deleteStack("${EnvironmentName}-${AWS::Region}-service")
                                deleteEcrRepository("${EnvironmentName}/kibana")
                                deleteEcrRepository("${EnvironmentName}/aws-es-kibana")
                                deleteEcrRepository("${EnvironmentName}/nginx")
                                deleteEcrRepository("${EnvironmentName}/webapp")
                                deleteS3Bucket("${ArtifactStore}")
                            except Exception as e:
                                print("Exception thrown: %s" % str(e))
                                pass
                        else:
                            print("RequestType %s, nothing to do" % event["RequestType"])
                        time.sleep(30)  # pause for CloudWatch logs
                        print('Done')
                        responseData={"Data":"OK"}
                        try:
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                        except Exception as e:
                            print("Exception thrown in cfnresponse: %s" % str(e))
                            pass
                    def deleteStack(stackName):
                        print("Deleting stack %s" % stackName)
                        client = boto3.client('cloudformation')
                        response=client.describe_stacks(StackName=stackName)
                        stackId=response["Stacks"][0]["StackId"]
                        print("Unique stackId: %s" % stackId)
                        client.delete_stack(StackName=stackId)
                        print("Wait for stack DELETE to complete")
                        waiter = client.get_waiter('stack_delete_complete')
                        waiter.wait(StackName = stackId)
                    def deleteEcrRepository(repositoryName):
                        print("Deleting ECR Repository %s" % repositoryName)
                        client = boto3.client('ecr')
                        client.delete_repository(repositoryName=repositoryName, force=True)
                    def deleteS3Bucket(bucketName):
                        print("Deleting S3 Bucket %s" % bucketName)
                        s3resource = boto3.resource('s3')
                        bucket = s3resource.Bucket(bucketName)
                        bucket.objects.delete()
                        for version in bucket.object_versions.all():
                            version.delete()
                        bucket.delete()
    PipelineCleanupExecutionRole:
        Type: AWS::IAM::Role
        Properties:
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - lambda.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: LogsForLambda
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
                - PolicyName: CloudFormationDescribeList
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - cloudformation:Describe*
                                - cloudformation:List*
                            Resource: '*'
                - PolicyName: CloudFormationDelete
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - cloudformation:DeleteStack
                            Resource:
                                - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${EnvironmentName}-${AWS::Region}-service/*"
                - PolicyName: ECRDeleteRepo
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - ecr:DeleteRepository
                            Resource:
                                - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EnvironmentName}*"
                - PolicyName: S3All
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"

Outputs:

    EcrUri:
        Description: ECR Repository URI for the Search Page
        Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}"
        Export:
            Name: !Sub "${EnvironmentName}-EcrUri"
